[{"model": "blog.post", "pk": 5, "fields": {"title": "Clean", "text": "<p>Today I completely obliterated my first EC2 instance. A year ago I moved to Australia, and the lag when connecting to Dublin over SSH was just too much. I wanted a clean slate, running right here in Sydney.</p><p>This process is simple, and involves only a few steps. First, make sure everything you want to keep is backed up. Then shut it down, terminate the virtual machine that represents your server, sever it's connection to the internet it by disassociating its IP address, and destroy any attached storage volumes.</p><p>If the server in question was your first personal web server, however, the first step can be a pretty sentimental experience. An eclectic mix of packages are installed - dependencies of half-baked but promising projects involving EEG-data processing, astronomy maths, or home automation. There are a number of configuration files for text editors and terminal multiplexers (updated and added to over the years) which when read top-to-bottom, tell the story of a steadily improving mastery of the tools of the trade.</p><p>And, obviously, the code you wrote to run on this server. Your code. Demo versions of websites you built for people (and eventually deployed on their hosting). Side-projects that made it far enough to be worth showing to someone. Occasionally, things that were actually used by other people.</p><p>In this case, my server contained all of the above, and even had some configuration, code, and data that exists nowhere else. And while I had the option to just attach the storage volume to a new server, it wouldn't have been a fresh start. Sometimes, you just really need to just throw a whole bunch of stuff out. The act of doing so, in choosing what goes and what stays, can be incredibly clarifying.</p>", "preview": "<p>Today I completely obliterated my first EC2 instance. A year ago I moved to Australia, and the lag when connecting to Dublin over SSH was just too much. I wanted a clean slate, running right here in Sydney.<br></p><p>This process is simple, and involves only a few steps. First, make sure everything you want to keep is backed up. Then shut it down, terminate the virtual machine that represents your server, sever it's connection to the internet it by disassociating its IP address, and destroy any attached storage volumes...</p>", "date": "2015-10-05"}}, {"model": "blog.post", "pk": 6, "fields": {"title": "Building", "text": "<p>I've never built a computer before. &nbsp;<span style=\"line-height: 1.42857;\">As a developer who wants to understand as much of the stack I work with as possible, this feels like a gap in my knowledge that needs filling.</span></p><p>I started getting really into programming at about age 14, so I've been doing it for about 10 years now, and I've always gotten by using a mac as \"my machine\". I think my first computer was an inherited Power Mac G4. These were pretty cool: you could pull this latch and the entire side would hinge flat, so you could really see what was inside.</p><p>The first time I realised this, I discovered how dusty a computer's insides become over time. Mine literally had cobwebs in it. Even at that age, I knew enough to understand that this would in no way impact the running of the thing, but I took the time to really clean the shit out of it anyway. Not because of spiders, but because I loved it, and I wanted to feel in some way connected with the tangible parts of it.</p><p>There's something missing in our relationship in technology. We've reached a stage in our application of abstraction where no one person understand how anything as complicated as an entire computer works, but we can still use them every day. This is obviously powerful and necessary, but somehow sad. &nbsp;</p><p>I've know people who know how to fix their own cars, and even build them from parts. They say it's impossible with newer cars. Two thirds of teens don't know how to change a tire. Personally, I believe that everyone has a right to understand the things that they depend on to live, and \"technology\" is in that box.</p><p>Now, that computer I was talking about before is literally in a box. I few years later, I inherited its successor, the G5. When I (immediately) pulled it open, there was no dust, and no cobwebs. It's insides were modular, contained in their own partitions and separated by clear plastic. When I read the Steve Jobs biography years later, I got the impression this is what he had always wanted, for the guts to be part of the designed product. But to me it felt like more separation, more distance from that understanding I think is important.</p><p>At some point, I started buying MacBooks. First the pro, then the retina. There has never been anything that I wanted or needed to build that I couldn't build on in OS X.</p><p>Anyway, this computer I'm making. It's also going to be made of parts I've chosen. A CPU and its fan, enough RAM to store Infinite Jest three hundred thousand times over, a hard drive with no moving parts, some sick graphics, some power, a motherboard to stick all the parts on, and a case to stick all the parts in.</p><p>To do this, I need to do some research. I need to make sure that all the parts work together. This is actually an interesting problem: First, only some of the parts are really dependant on the others. Does the RAM have the right number of pins for the motherboard? Will the CPU's fan fit in the case? Will the power supply provide enough power for all of the components?</p><p>Then, I need to know if they will each work with linux. I've used linux a lot over the years, but never built a computer to run on it. And from what I've heard, I should do googling, and make sure I'm not going to hit weird compatibility issues that sound difficult to fix. This is another series of constraints.</p><p>Provided all of these dependencies are satisfied, and I get the right cables to connect all the parts, they will form a system that works. I'll assemble it inside its case, and I'll plug it in. And if I've learned anything, it'll work, and I'll understand a bit more about how it works.</p><p><i><br></i></p><p><i>(Number of \"Infinite Jest\"s in 8GB:&nbsp;</i></p><p><i>8GB is about 8 trillion bytes. We get one character per byte, or half a character if we're using fancy symbols. I don't know if we are, because I haven't read it.</i></p><p><i>Infinite Jest is about half a million words, or 28 million characters - David Foster Wallace's average word length was 4.69, plus 1 for spaces.</i></p><p><i>So we can store it in memory as many times we can fit 28 million characters into 8 trillion, so about 300 thousand times.)</i></p>", "preview": "<p>I've never built a computer before. &nbsp;<span style=\"line-height: 1.42857;\">As a developer who wants to understand as much of the stack I work with as possible, this feels like a gap in my knowledge that needs filling.</span></p><p>I started getting really into programming at about age 14, so I've been doing it for about 10 years now, and I've always gotten by using a mac as \"my machine\". I think my first computer was an inherited Power Mac G4. These were pretty cool: you could pull this latch and the entire side would hinge flat, so you could really see what was inside...</p>", "date": "2015-11-19"}}, {"model": "blog.post", "pk": 7, "fields": {"title": "200 Words on AlphaGo", "text": "<p><i>Originally written for a job application: \"Describe something awesome in 200 words or less\"</i></p><p>In 1996, for the last time, the world's greatest chess player, Kasparov, defeated a chess-playing supercomputer. In '97, after losing the inevitable rematch, he remarked on the \"deep intelligence and creativity\" in \"Deep Blue\"'s playing style.</p><p>Last week, the Man vs. Machine experiment was repeated with Go, a 4000 year-old game with simpler rules but much more vast in its complexity*. Lee Se-dol faced off with \"AlphaGo\" in exhibition matches watched by millions. He lost three games consecutively. Exuberant journalists welcomed our new robot overlords, and the singularity seemed only weeks away.</p><p><span style=\"line-height: 1.42857;\">But in the fourth game AlphaGo erred and Lee transformed this blip into victory with a move that Go commentators described as \"divine-inspired\". For a golden moment balance and clarity were restored to a decades-old discussion: Skynet and HAL went unmentioned, and the immeasurable, indomitable creativity of the human spirit was the hero of the story once more.</span></p><p>Humanity is creating the universe's next intelligence. One board game at a time.</p><p><i>* If you were to write down the number of possible states of a chess board, this number would fit inside the equivalent Go number about 650 times left-to-right.</i></p>", "preview": "<p><i>Originally written for a job application: \"Describe something awesome in 200 words or less\"</i></p><p>In 1996, for the last time, the world's greatest chess player, Kasparov, defeated a chess-playing supercomputer. In '97, after losing the inevitable rematch, he remarked on the \"deep intelligence and creativity\" in \"Deep Blue\"'s playing style.</p><p>Last week, the Man vs. Machine experiment was repeated with Go, a 4000 year-old game with simpler rules but much more vast in its complexity*...<br></p>", "date": "2016-03-18"}}]